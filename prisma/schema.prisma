datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String? // Add this field
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  feedbacks      Feedback[]
  subscriptions Channel[]       @relation("UserSubscriptions")
  videos        Video[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Feedback {
  id          String @id @default(cuid())
  userId      String
  title       String
  description String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Channel {
  id          String    @id
  title       String
  customUrl   String?
  thumbnailUrl String?
  subscribers User[]    @relation("UserSubscriptions")
  videos      Video[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Video {
  id          String   @id
  channelId   String
  channel     Channel  @relation(fields: [channelId], references: [id])
  title       String
  description String?
  thumbnailUrl String?
  duration    String?
  publishedAt DateTime
  audioUrl    String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}