datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
model User {
  id            String          @id @default(cuid())
  email         String          @unique
  first_name    String?
  last_name     String?
  password      String? // Add this field
  emailVerified DateTime?
  image         String?
  credits       Int?            @default(0)
  user_id       String?          @unique
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  feedbacks     Feedback[]
  subscriptions Subscription[]
  transactions  Transaction[]
  videos        Video[]
  categories    Category[]      @relation("UserCategories")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  amount            Float
  currency          String   @default("USD")
  status            TransactionStatus @default(PENDING)
  credits           Int?
  providerReference String?  // Flutterwave transaction reference
  providerResponse  Json?    // Store full provider response
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  subscriptionId    String?
  metadata          Json?
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Feedback {
  id          String @id @default(cuid())
  userId      String
  title       String
  description String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Channel {
  id           String     @id @default(uuid())
  title        String
  customUrl    String?
  thumbnailUrl String?
  videos       Video[]
  subscribers  Subscription[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  user      User     @relation(fields: [userId], references: [id])
  channel   Channel  @relation(fields: [channelId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, channelId])
}

model Video {
  id           String   @id
  channelId    String
  channel      Channel  @relation(fields: [channelId], references: [id])
  title        String
  description  String?
  thumbnailUrl String?
  duration     String?
  publishedAt  DateTime
  audioUrl     String?
  users        User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String
  userId    String
  user      User      @relation("UserCategories", fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, name]) // Enforce unique category names per user
  @@unique([userId, slug]) // Enforce unique slugs per user
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  email     String
  full_name String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}